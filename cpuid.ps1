#read result of CPUID instruction using only Powershell
#keep in mind, on multicore machines it will use CPU where thread running, no explicit CPU selection



#//Intel SDM, Vol 2A 3.2 CPUID https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html
#//Microsoft Hypervisor Top Level Functional Specification v5.0C 2.4 Microsoft Hypervisor CPUID Leaves https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/reference/tlfs

$eax=0x40000002 #give here EAX for CPUID 


[byte[]]$asmCode = (
0x53,                      #push rbx
0x49, 0x89, 0xd0,          #mov r8, rdx
0x89, 0xc8,                #mov eax, ecx
0x0f, 0xa2,                #cpuid
0x41, 0x89, 0x00,          #mov dword ptr [r8], eax
0x41, 0x89, 0x58, 0x04,    #mov dword ptr [r8+4], ebx
0x41, 0x89, 0x48, 0x08,    #mov dword ptr [r8+8], ecx
0x41, 0x89, 0x50, 0x0c,    #mov dword ptr [r8+12], edx
0x5b,                      #pop rbx
0xc3)                      #ret


$t=Add-Type -MemberDefinition '[UnmanagedFunctionPointerAttribute(CallingConvention.Cdecl)] public delegate void AsmCodeDelegate(int eax, byte[] buffer);[DllImport("kernel32", SetLastError = true)] public static extern IntPtr VirtualAlloc(IntPtr lpAddress, UIntPtr dwSize, UInt32 flAllocationType, UInt32 flProtect);' -Name 't' -PassThru
[IntPtr] $asmCodePointer = [IntPtr]::Zero
$asmCodePointer=[Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.t]::VirtualAlloc([IntPtr]::Zero, [UIntPtr]::new($asmCode.Length), 0x1000 -bor 0x2000,0x40)
[System.Runtime.InteropServices.Marshal]::Copy($asmCode, 0, $asmCodePointer, $asmCode.Length)
$AsmCodeDelegate=[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($asmCodePointer,[Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.t+AsmCodeDelegate])
[byte[]]$buffer=New-Object byte[] 16
$AsmCodeDelegate.Invoke($eax,[byte[]]$buffer)

"CPUID 0x"+ "{0:X}" -f $eax

"eax: 0x"+[System.BitConverter]::ToString(($buffer[3],$buffer[2],$buffer[1],$buffer[0])).Replace("-","")
"ebx: 0x"+[System.BitConverter]::ToString(($buffer[7],$buffer[6],$buffer[5],$buffer[4])).Replace("-","")
"ecx: 0x"+[System.BitConverter]::ToString(($buffer[11],$buffer[10],$buffer[9],$buffer[8])).Replace("-","")
"edx: 0x"+[System.BitConverter]::ToString(($buffer[15],$buffer[14],$buffer[13],$buffer[12])).Replace("-","")
    
